//
//
// Class And Objects
//
//


OOP - 
 Object-Oriented-Programming.
 programming style that intended to make (thinking) things as close to the real world.
 each object is an independent unit with a unique identity.
  
 *oop have: identity, attributes, behavior:
 
 **oop identity - each object is an independent unit.
 
 **oop attributes (global variable / variable inside a class) - describes the current state of an object
 example: car move, phone rings.
 
 **oop behavior (method / function) - specific to the object type (what the object can do)
 method - method/function - collection of statements that are grouped together to perform an operation /action.
 method parameters - method can take data called parameters 
 method can return a value or not using void.
 	static void myMethod(String MyParameters) { }
 -!- method advantage is write once and use it multiple times.
  
 -!- example: a class describes what the object will be, but is separate from the object itself.
 class is a blueprints for an object.
 one class blueprints class can create many object/s.
 
 -!- each class has a name, and each is used to define "attributes" -and- "behavior"
 example: 
 attributes: (global variable): name, age...
 behavior: talk, walk...

-------------------------------------------------------------------------------------------
 
 public class A_OOP {	
	private String stName = "" ; //attributes
	
	//method
	static void fnHello() 
	{
		System.out.println("Hello...");
	}
	
	public static void main(String [] args) 
	{	
		//declare an object "ap" of the class "A_OOP()"
		A_OOP ap = new A_OOP();
	
		//"ap" is an object of type "A_OOP" (class) with a call to "fnHello()" method
		ap.fnHello();
	}
}

-------------------------------------------------------------------------------------------

Access Modifiers - is a access level/s for accessing classes, attributes, methods
Access Modifiers Attributes: private/ public/ default/ protected

classes access modifiers are: public/ default
public: accessible from any other class.
default: accessible from class from the same package. 

attributes/ methods access modifies are:
private: accessible only within the declared class itself.
public: accessible from any other class
default: no access control modifier available to any other class in the same package
protected: like "default" + "subclasses" can access protected variable/method of the superclass

-!- keep variables/attributes within class "private",
    and access them using Getter and Setter method.
    

Getters and Setters - used to protect your data (encapsulation) 
"Getters" to get data, "Setters" to set data.
using "Setters" to validate data before setting it to attributes.

-------------------------------------------------------------------------------------------
public class A_OOP {
	// Global variable / attributes
	private String stFName = "";
	
	//Getters
	public String getStFName() {
		return stFName;
	}
	
	//Setters
	public void setStFName(String stFName) {
		this.stFName = stFName;
	}

	public static void main(String [] args) 
	{
		A_OOP ap = new A_OOP();
	
		//getter and setter
		ap.setStFName("yaki");
		System.out.println(ap.getStFName());
	}
}
-------------------------------------------------------------------------------------------

this - refer to the attributes "stFName".

*-*-*------TODO write about superclass------


CONSTRUCTORS - constructors are special methods invoked when an object is created
constructors name must be same as its class name.
constructors have no explicit return type.
constructors can have/take a parameters.
-!- java automatically provides a default constructor. (all classes have a constructor)

-------------------------------------------------------------------------------------------
public class B_OOP_constructor 
{

	private String FName = "";
	
	//constructor #1
	B_OOP_constructor() 
	{
		FName = "yaki";		
		System.out.println("FName === " + FName);
	}
	
	B_OOP_constructor(String fname) 
	{
		FName = fname;
		System.out.println("parameters + FName  === " + FName);
	}
	
	//constructor #2
	public static void main(String[] args) 
	{
		B_OOP_constructor boop = new B_OOP_constructor(); //object call constructor #1
		B_OOP_constructor boopB = new B_OOP_constructor("eli");	//object call constructor #2 with parameter.
	}
}
-------------------------------------------------------------------------------------------


Value Types - 
value types are the basic types (bytes, short, int, long, float, double, boolean, char).
the value types (data types) assigned value to them in a memory location.
when you pass them (Value Types) to a method/function you pass the variable value (not the variable)

-------------------------------------------------------------------------------------------
public class E_OOP_ValueType {
	
	static void addOne(int number) {
		number++;
	}
	
	public static void main(String[] args) {
		int intValueType = 9;
		System.out.println(intValueType); // 9
	}
}
-------------------------------------------------------------------------------------------


Reference Types -  
 stores a reference (address) to the memory location where data stored.
 when you create an object using the constructor you create a reference variable.
 reference types example: Array, String  
 -!- Reference Types like pointer in c.

Reference Type:
Reference Types are used by a reference which holds a reference (address) to the object 
but not the object itself. 

Because reference types represent the address of the variable rather than the data itself, 
assigning a reference variable to another doesn't copy the data. 
Instead it creates a second copy of the reference, which refers to the same location of the heap 
as the original value. 

Reference Type variables are stored in a different area of memory called the heap. 
This means that when a reference type variable is no longer used, it can be marked for garbage collection. 
Examples of reference types are Classes, Objects, Arrays, Indexers, Interfaces etc.

example:
int[] iArray = new int[20]; //the space required for the 20 integers that make up the array is allocated on the heap.


Math Class -
the JDK have many classes, like Math Class.
no need to create an object of the Math Class to use it.
enter the Math and the wanted method.

Math.abs() - return absolute value
Math.ceil() - return round a floating point value up
Math.floor() - return round a floating point value down
Math.max() - return max value of parameters
Math.min() - return min value of parameters
Math.pow() - return power of second parameter
Math.sqrt() - return square root value 
Math.sin() - return sinus value
Math.cos() - return cosine value

 
Static - when we declare a Variable / Method as static,
the static variable / static method belongs to the class -and- not to a specific instance.
(instance - each object is called an instance of a class.
static variable will declare in UPPER-CASE

-------------------------------------------------------------------------------------------
public class H_Counter 
{
	//attribute 
	public static int COUNT=0;
	
	//method / constructor
	public H_Counter() {
		COUNT++;
	}
}


public class H_Counter_Main 
{
	public static void main(String[] args) {	
		H_Counter hc = new H_Counter();  //==1
		System.out.println("count == " + hc.COUNT);
		
		H_Counter hc2 = new H_Counter(); //==2
		System.out.println("count == " + hc2.COUNT);
		
		hc2.COUNT++;
		System.out.println("count == " + hc2.COUNT); //==3
	}
}
-------------------------------------------------------------------------------------------
 
 
Static Method
 
-------------------------------------------------------------------------------------------
public class H_Counter 
{
	//static method
	public static void version() {
		System.out.println("Version 1.4");
	}
}


public class H_Counter_Main 
{
	public static void main(String[] args) {	
		H_Counter.version(); //call static Method
	}
}
-------------------------------------------------------------------------------------------
 
 Static Method Example: 
 Math class
 main method
 
 
 
 Final - final keyword make variable constant (assigned once)
 Final variable will declare in UPPER-CASE 

------------------------------------------------------------------------------------------- 
public class I_Constant 
{
	private static final double PI = 3.14;
	
	public static void main(String[] args) 
	{	
		System.out.println("PI === " + PI);
	}
}
------------------------------------------------------------------------------------------- 
 
-!- Method / classes can be marked "final"
final method will restrict methods that they cannot be overridden 
final classes will restrict subclasses. 
 
 
 
 Packages - package are used to avoid name conflicts and to control access to class.
 Packages can be defined as a group with similar classes -or- similar subject.
 when creating a class in a package, the first line in the class will be the package name.
 package packageName;
 
 import the classes inside a package to be able to use them as they were in the same package.
 
 Two things happen when a class in a package.
 #1: name of the package becomes a part of the name of the class.
 #2: the name of the package must match the directory structure.
 
 import one class 
 import c_Array.A_ArrayBasic;
 
 import all of the class with "*" (wildcard)
 import c_Array.*;
 
 
-------------------------------------------------------------------------------------------
 package d_ClassAndObjects;

import c_Array.A_ArrayBasic;

public class J_ImportClasses 
{
	public static void main(String[] args) {
		A_ArrayBasic a = new A_ArrayBasic();
		a.ArrayOneDimensionalWrite();
		a.ArrayOneDimensionalRead();
	}
}
-------------------------------------------------------------------------------------------
 

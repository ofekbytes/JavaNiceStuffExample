

--------------
Java_Advanced
--------------


- exception handling - is a way to deal with software runtime error/s.
- multiple exceptions - throw, Exception Handling.
- threads
- Exception Type - runtime vs checked exception

arraylist
linkedlist
hashmap
sets
sorting list
iterators
working with files
reading files
creating and writing files

-------------------------------------------------------------------------------------------




Exception handling - 
exception handling is a way to deal with software runtime error/s.  
example:
- user entered wrong data
- file not exist error
- network error
-- using exception handling to deal with this error type/s.

exception handling uses try/catch block around the code that might generate an exception.

try {
	//code
}
catch {
	//error handling
}


-------------------------------------------------------------------------------------------
.\f_Java_Advanced.ExceptionsHandling\
ExceptionHandlingExamples.java
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
		int arrGrades[] = new int [2];
		
		try 
		{
			System.out.println(arrGrades[3]);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			System.out.println("An Error occurred - catch()");
			e.printStackTrace();
		}
-------------------------------------------------------------------------------------------
An Error occurred - catch()
java.lang.ArrayIndexOutOfBoundsException: 3
	at f_Java_Advanced.ExceptionsHandling.ExceptionHandlingExamples.main(ExceptionHandlingExamples.java:17)
-------------------------------------------------------------------------------------------

-!- without the try/catch block this code should crash the program.

-!- catch (Exception e) 
    catch all possible exceptions.



multiple exceptions - throw, Exception Handling. 


throw - 
the throw keyword allows you to manually generate exceptions from you methods.
exception like:
throws ... 
IndexOutOfBoundsException
IllegalArgumentException
ArithmeticException

throws statement in the method definition defines the type of exception/s the method can throw.

-!- multiple exceptions can be defined in the throws statement using a comma-separated.


Exception Handling - 
single try/catch contain multiple catch block that handle different exceptions separately.

-------------------------------------------------------------------------------------------
try {
}
catch (
-------------------------------------------------------------------------------------------



Threads - 
Java is multi-threaded programming language.
Using threaded programming we can make optimal use of computer resources.
Using threads to run different tanks in parallel.

Two/2 ways to create a thread
1. Extend the Thread Class inherit from the Thread class, override its run() method.
2. implementing the Runnable interface.

-------------------------------------------------------------------------------------------
new Thread() --> [new] --> [runnable] run() --> [Running] --> end of exection --> [dead]

new Thread() --> [new] --> [runnable] run() --> [Running] --> sleep(), wait() --> [waiting] --> go back to Running step until it become death process.
-------------------------------------------------------------------------------------------


Thread - Extend Thread - 
Extend the Thread Class inherit from the Thread class, override its run() method. 
1. create a new object of your class
2. call the start() method - running the thread/s.


-------------------------------------------------------------------------------------------
..\f_Java_Advanced.Threads\
Messages.java
ThreadMain.java
-------------------------------------------------------------------------------------------

-!- run() method statements execute on a different thread.
-!- setPriority() method - every thread have a priorities range from 1 - 10. (default thread is 5)



Thread - 
1. implementing the Runnable interface.
2. implement the run() method.
3. create a new thread object
4. pass the Runnable class to its constructor
5. start the tread - start() method.

-------------------------------------------------------------------------------------------
..\f_Java_Advanced.Threads\
Msg.java
ThreadMain.java
-------------------------------------------------------------------------------------------


Thread.sleep() method - pause a thread for a specified period of time (millisecond).

Example: Thread Sleep 1000 millisecond = 1 second:
Thread.sleep(1000);

-!- use try..catch(InterruptedException e) when using Thread.sleep();

-------------------------------------------------------------------------------------------
	try {
		t.sleep(1000);
	} 
	catch (InterruptedException e) {
		e.printStackTrace();
	}
-------------------------------------------------------------------------------------------

-!- Runnable interface is the best way because it enables you to extends from another class.



Exception Type - runtime vs checked exception - 





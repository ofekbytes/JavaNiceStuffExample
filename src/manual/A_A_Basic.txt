1. java
2. java - first program
3. java - main Method
4. java - System.out.println()
5. java Comments - single-line comment / Multi-Line comment -


.
.
1. Java -
 
Java is a high level, modern programming language designed in the early 1990s by Sun Microsystems, 
and currently owned by Oracle. 

Java is Platform Independent, which means that you only need to write the program once 
to be able to run it on a number of different platforms (operating system).

Java is portable, robust, and dynamic, with the ability to fit the needs of virtually any type of application.
Java guarantees that you'll be able to Write Once, Run Anywhere.

More than 3 billion devices run Java. 

- Java is used to: 
-- develop apps for Google's Android OS
-- various Desktop Applications 

- various Desktop Applications:
-- media players, 
-- antivirus programs
-- Web Application
-- Enterprise Applications (example: banking)

.
.
2. java - first program -

-- In Java, every line of code that can actually run needs to be inside a class.
-- In Java, each application has an entry point (a starting point),
   which is a method called "main".

-- example: class "MyClass".

class MyClass 
{
    public static void main(String[ ] args) 
    {
        System.out.println("First Java Program");
    }
}

-!- Every program in Java must have a class.
-!- Every Java program starts from the main method.

.
.
3. java - main Method -

--  java main() method template:

--- example: main() method template:
    public static void main(String[ ] args)

-- public: anyone can access it
-- static: method can be run without creating an instance of the class containing the main method
-- void: method doesn't return any value
-- main: the name of the method
 
--- example: test() method, return nothing :
 	void test()
 
-- The method's parameters are declared inside the parentheses "()" that follow the name of the method. 
 
.
. 
4. java - System.out.println() - 
 
 -- The println() method prints a line of text to the screen (console).
-- The System() class and its "out" stream are used to access the println() method.
In classes, methods, and other flow-control structures code is always enclosed in curly braces { }.
 
 -!- In Java, each code statement must end with a semicolon. 
--- example:

class MyClass 
{
    public static void main(String[ ] args) 
    {
        System.out.println("First Java Program");
    }
}

.
.
5. java Comments - single-line comment / Multi-Line comment / javaDoc -
 
The purpose of including comments in your code is to explain what the code is doing.

-- A single-line comment 
   starts with two forward slashes and continues until it reaches the end of the line. 

--- example:

// this is a single-line comment -
system.out.println("test") // a single-line comment after code

-!- Adding comments as you write code is a good practice, 
    because they provide clarification and understanding when you need to refer back to it, 
    as well as for others who might need to read it.
 
-- Multi-Line Comments (Block comment) - 
   Java also supports comments that span multiple lines.
   You start this type of comment with a forward slash followed by an asterisk, 
   and end it with an asterisk followed by a forward slash. 
For example:
 /*  This is also a
    comment spanning
    multiple lines */
    
5. java Documentation comments  - 

Documentation comments are special comments that have the appearance of multi-line comments,
with the difference being that they generate external documentation of your source code. 
These begin with a forward slash followed by two asterisks, 
and end with an asterisk followed by a forward slash.
 
--- example:

/** This is a documentation comment */

/** This is also a
    documentation comment */

-- Javadoc is a tool which comes with JDK and it is used for generating Java code 
   documentation in HTML format from Java source code which has required documentation in a predefined format.

When a documentation comment begins with more than two asterisks, 
Javadoc assumes that you want to create a "box" around the comment in the source code. 
It simply ignores the extra asterisks.

--- example:

/**********************
method / fucntion documentation
***********************/

-- generate java doc from eclipse

Project > Generate Javadoc....

In the Javadoc command: field, browse to find javadoc.exe 
(usually at [path_to_jdk_directory]\bin\javadoc.exe).

Check the box next to the "project/package/file" for which you are creating the Javadoc.

In the Destination: field, browse to find the desired destination 
(for example, the root directory of the current project).

Click Finish.

-!- You should now be able to find the newly generated Javadoc in the destination folder. 
    Open index.html.
    
    
    

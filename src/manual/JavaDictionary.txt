
class: every line of code in java need to be in class.


Value Type:
A Value Type stores its contents in memory allocated on the stack. 
When you created a Value Type, a single space in memory is allocated to store the value and 
that variable directly holds a value. 
If you assign it to another variable, the value is copied directly and both variables work independently. 
Predefined datatypes, structures, enums are also value types, and work in the same way. 
Value types can be created at compile time and Stored in stack memory, 
because of this, Garbage collector can't access the stack.

example: 
	int x = 10; //value 10 is stored in an area of memory called the stack


variable / value types:
byte, short, int, long, float, double, boolean


variables Reserved words:
abstract, continue, for, new, switch, assert, default, goto, package, synchronized,
boolean, do, if, private, this, break, double, implements, protected, throw,
byte, else, import,	public,	throws, case, enum, instanceof, return, transient
catch, extends, int	short, try, char, final, interface, static, void,
class, finally, long, strictfp, volatile, const, float, native, super, while


Java arithmetic operators: 
+ addition, 
- subtraction, 
* multiplication, 
/ devision 
% modulo

increment
++test; test++;

decrement
--test; test--;

//prefix
int a = 2;
int b = ++a; // a=3, b=3

//postfix
int c = 3;
int d = c--; // d=3 c=2

 
logical operators - 
; ==> semicolons
! ==> not
|| ==> logical OR
&& ==> logical AND
&  ==> logical AND


 public - 
 static - no need for instance of the class (static belongs to class) declare with uppercase.
 example:
 public static int COUNT = 0
 
 final - final variable is a constant variable assigned only once; (variable with uppercase)
 
 
 Packages -
 packages are used to avoid name conflicts and to control access to classes
 import package to be used in another
 
  
 CLASS -
 class is a blue print of a object.
 each class has a name and each is used to define attributes and behavior.
  example:
 attributes: name, age, gender.
 behavior: walk, run, jump, 

 
 Methods (function) - define the behavior.
 method is a collection of statements that group together to perform an operation.
 example:
System.out.println();
 
 
 attributes / variable declaration : declared inside the Method/s.
// public methodExample{
// 	private int age;	
//	...
//}
 
 Parameters / Arguments: Values passed to a method "(b1,1)" from outside example main()
 //methodChange(jb, 1);
 
 
 constructor - is special methods invoked when an object is created. 
 constructor name must be same as its class name (with no return) 


 Object -

Reference Type:
Reference Types are used by a reference which holds a reference (address) to the object 
but not the object itself. 
Because reference types represent the address of the variable rather than the data itself, 
assigning a reference variable to another doesn't copy the data. 
Instead it creates a second copy of the reference, which refers to the same location of the heap 
as the original value. 
Reference Type variables are stored in a different area of memory called the heap. 
This means that when a reference type variable is no longer used, it can be marked for garbage collection. 
Examples of reference types are Classes, Objects, Arrays, Indexers, Interfaces etc.

example:
int[] iArray = new int[20]; //the space required for the 20 integers that make up the array is allocated on the heap.


 reference types -  
 stores a reference (or address) to the memory location where data stored.
 when you create an object using the constructor you create a reference variable
 reference types example: Array, String  
 -!- like pointer in c.


 OOP - 
 Object-Oriented-Programming.
 programming style that intended to make thinks as close to the real world.
 each object is an independent unit with a unique identity. 
 *oop have: identity, attributes, behavior.
 **oop identity - each object is an independent unit.
 **oop attributes - describes the current state of an object
 example: car move, phone rings.
 **oop behavior - specific to the object type
 
 
 OOP - there are 4 core concept in oop:
 encapsulation, inheritance, polymorphism, abstraction.

 
-???-
https://en.wikipedia.org/wiki/Object-oriented_programming

Object-oriented programming (OOP):
Object-oriented programming (OOP) is a programming paradigm (a thought pattern within the framework of a scientific field) 
based on the concept of "objects", which may contain data, 
in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. 
A feature of objects is that an object's procedures can access and often modify the data fields of the object 
with which they are associated (objects have a notion of "this" or "self"). 
In OOP, computer programs are designed by making them out of objects that interact with one another.
There is significant diversity of OOP languages, but the most popular ones are class-based, 
meaning that objects are instances of classes, which typically also determine their type.

 
 encapsulation: (data hiding)
 Encapsulation can be used to hide data members and members function. 
 encapsulation means that the internal representation of an object 
 is generally hidden from view outside of the object's definition. 
 Typically, only the object's own methods can directly inspect or manipulate its fields.

 
 encapsulation: (data hiding)
 it is the technique of making the fields in a class private and providing access to the fields via public methods.
 if a field is declared "private" it cannot be accessed by anyone outside the class, thereby hiding the
 field within the class.
 therefore "encapsulation" is also referred to as data hiding.
 
 
 interface:
 an interface is a collection of abstract methods.
 a class implements an interface, thereby the abstract methods of the interface.
 
 
 -???- interface read more
 //https://en.wikipedia.org/wiki/Interface_(Java)
 
 
 
  =====Find More About====
 
 =?= member methods 
 
 
 
 
 
 
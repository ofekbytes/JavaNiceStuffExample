//
//
// Class And Objects
//
//


OOP - 
 Object-Oriented-Programming.
 programming style that intended to make (thinking) things as close to the real world.
 each object is an independent unit with a unique identity.
  
 *oop have: identity, attributes, behavior:
 
 **oop identity - each object is an independent unit.
 
 **oop attributes (global variable / variable inside a class) - describes the current state of an object
 example: car move, phone rings.
 
 **oop behavior (method / function) - specific to the object type (what the object can do)
 method - method/function - collection of statements that are grouped together to perform an operation /action.
 method parameters - method can take data called parameters 
 method can return a value or not using void.
 	static void myMethod(String MyParameters) { }
 -!- method advantage is write once and use it multiple times.
  
 -!- example: a class describes what the object will be, but is separate from the object itself.
 class is a blueprints for an object.
 one class blueprints class can create many object/s.
 
 -!- each class has a name, and each is used to define "attributes" -and- "behavior"
 example: 
 attributes: (global variable): name, age...
 behavior: talk, walk...

-------------------------------------------------------------------------------------------
 
 public class A_OOP {	
	private String stName = "" ; //attributes
	
	//method
	static void fnHello() 
	{
		System.out.println("Hello...");
	}
	
	public static void main(String [] args) 
	{	
		//declare an object "ap" of the class "A_OOP()"
		A_OOP ap = new A_OOP();
	
		//"ap" is an object of type "A_OOP" (class) with a call to "fnHello()" method
		ap.fnHello();
	}
}

-------------------------------------------------------------------------------------------

Access Modifiers - is a access level/s for accessing classes, attributes, methods
Access Modifiers Attributes: private/ public/ default/ protected

classes access modifiers are: public/ default
public: accessible from any other class.
default: access from the same package. 

attributes/ methods access modifies are:
private: accessible only within the declared class itself.
public: accessible from any other class
default: no access control modifier available to any other class in the same package
protected: like "default" + "subclasses" can access protected variable/method of the superclass

------TODO write about superclass------


OOP -  Object-Oriented-Programming - there are 4 core concept in oop:
 encapsulation, inheritance, polymorphism, abstraction.
 
 
 OOP ENCAPSULATION -
 class hidding data (variable) from other class/user using the private to do the job
 and use public "getter" and "setters" method to modified 
 that way we can make data validation.
 *oop encapsulation summary:
 **control data is access / modified. 
 **easy to change code. 
 **change code on one part without effecting other parts 
 
 
 OOP INHERITANCE:
 inheritance is the process that enables one class to acquire the properties (method and variables) of another
 more manageable hierarchical order.
 **subclass - The class inheriting the properties of another is the subclass (derived class -or- chiled class)
 **superclass - the class whose properties are inherited is the superclass (base class -or- parent class)
 to inherit from a class, use the "extends" keyword.

 **subclass inherited from another class (superclass) variable and methods (non private)
 // example:
 //------------------------------------------------------------------------------------------
 // class Animal{
 //    protected int age;
 //    public void food(){
 //        System.out.println("foot 3 time a day");
 //    }
 // }
 //
 //
 // class Cat extends Animal{
 // Cat(){
 //   age = 7;
 // }
 //------------------------------------------------------------------------------------------

 
 -!- constructors are not "member methods" and so are not inherited by subclasses.
 -!- the constructor of the superclass is called when the subclass is instantiated

//------------------------------------------------------------------------------------------ 
// public class testA {
//
//	public testA() {
//		System.out.println("testA");
//	}
// }
//
//
// public class testB extends testA{
//
//	public testB() {
//		System.out.println("testB");
//	}
// }

// public class util {
//
// 	public static void main(String[] args) {
// 	  testB tb = new testB();  instantiated of the class
//    }
// } 
// 
//  output: 
//  testA
//  testB


//------------------------------------------------------------------------------------------


-!- you can access the superclass from the subclass using "super" keyword
// super.intVariable


OOP POLYMORPHISM-
refers to the idea of "having many forms"
occurs when there is a hierarchy of classes related to each other through "inheritance"



OOP ABSTRACTION -
    
    
    
    
    
------------------------

reference types -  
stores a reference (or address) to the memory location where data stored.
when you create an object using the constructor you create a reference variable
reference types example: Array, String  
-!- like pointer in c.


 
 =====Find More About====
 =?= member methods 
 ========================    
    
    
    
    
 
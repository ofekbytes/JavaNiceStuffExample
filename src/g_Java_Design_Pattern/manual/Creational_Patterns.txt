
Java_Design_Pattern - Creational_Patterns

These design patterns provide a way to create objects while hiding the creation logic, 
rather than instantiating objects directly using new operator. 
This gives program more flexibility in deciding which objects need to be created for a given use case.

1. Factory Pattern

.
.
1. Factory Pattern -

-- Factory pattern create object without exposing the creation logic to the client 
   and refer to newly created object using a common interface.
   
--- example:
    a Shape interface and concrete classes implementing the Shape interface. 
    ShapeFactory class (A factory class) is defined as a next step.

    FactoryPatternDemo class will use ShapeFactory to get a Shape object. 
    It will pass information (CIRCLE / RECTANGLE / SQUARE) to ShapeFactory to get the type of object it needs.

--- example: 
	<./g_Java_Design_Pattern/Creational_Patterns/FactoryPattern>

